#!/usr/bin/python3
import argparse
import subprocess
import os, sys
import time


parser = argparse.ArgumentParser(description="UV-Vis Plotter")
parser.add_argument("files", nargs="+", help="Input file(s), separated by spaces")
parser.add_argument("-wl", "--wavelength", required=True ,type=str, help="Starting and final wavelength (nm), separated by a comma (,)")
parser.add_argument("-dev", "--deviation", type=float, default=0.4, help="Standard deviation (eV), default is 0.4")
parser.add_argument("-csv", "--table", action='store_true', help="Creates a CSV file cointaining all file(s) absorbances")
parser.add_argument("-gau", "--gaussian", action='store_true', help="Plot the UV-Vis spectra with Gaussian adjustment (default)")
parser.add_argument("-ltz", "--lorentzian", action='store_true', help="Plot the UV-Vis spectra with Lorenztian adjustment")
parser.add_argument("-norm", "--normalized", action='store_true', help="Y values are normalized to the highest peak of all lines")
parser.add_argument("-showm", "--showmultiplicity", action='store_true', help="Y values are normalized to the highest peak of all lines")
args = parser.parse_args()
wl = args.wavelength
sys.path.append(os.getcwd())
def QC_prog(x):
  with open(x, 'r') as file:
    lines = file.readlines()
    global filetype
    if '            Gaussian, Inc.  All Rights Reserved.\n' in lines:
      filetype='Gaussian'
    elif '                  Welcome to Q-Chem\n' in lines:
      filetype='Q-Chem'
    else:
        filetype='Non'
types = []
unsupported_files = [] 
PATH=sys.path[0]
c = 2.998e8  # Speed of light in m/s
h = 6.626e-34  # Planck's constant in J*s
ev_to_joules = 1.602e-28  # Conversion factor from eV to joules
multiplicity = {'Singlet': 'S', 'Triplet': 'T', 'Quintet': 'Q'}

if len(wl.split(',')) == 1:
    print("Error: You must provide a wavelength range separated by a comma e.g.  -wl 200,700")
elif not wl.split(',')[0] < wl.split(',')[1]:
    print('Error: Initial wavelenght must be lower than final wavelenght')
else:
    datas = args.files
    dev = args.deviation
    try:
        lambda1 = wl.split(',')[0]
        lambda2 = wl.split(',')[1]
        print('Reading Files...\n')
        all_osc=[]
        all_nm=[]
        all_mult=[]
        a=0
        for m in datas:
            m = os.path.abspath(m)
            if not os.path.isdir(m):
                a+=1
                with open(m, 'r') as file:
                    lines = file.readlines()
                    exec("osc_values_"+str(a)+"= []")
                    exec("nm_values_"+str(a)+"=[]")
                    exec("mult_values_"+str(a)+"=[]")
                    QC_prog(m)
                    if filetype=='Q-Chem':
                        types.append(os.path.basename(m)+' is a Q-Chem output file')
                        for num, line in enumerate(lines):
                            if 'Strength   :' in line: #Q-CHEM
                                osc = float(line.split()[-1])
                                exec("osc_values_"+str(a)+".append(osc)")
                                prev_line = lines[num - 4].strip()
                                prev_block = lines[num -5:num]
                                mult = [multiplicity.get(line.split(':')[-1].strip(), '') for line in prev_block if 'Multiplicity' in line]
                                exec("mult_values_"+str(a)+".append(mult[0])")
                                E= float(prev_line.split()[-1])
                                nm=h*c/(E*ev_to_joules)
                                exec("nm_values_"+str(a)+".append(nm)")
                        exec("all_osc.extend(osc_values_"+str(a)+")")
                        exec("all_nm.append(nm_values_"+str(a)+")")
                        exec("all_mult.append(mult_values_"+str(a)+")")
                    elif filetype=='Gaussian':
                        types.append(os.path.basename(m)+' is a Gaussian output file')
                        for num, line in enumerate(lines):
                            if ' f=' in line: #GAUSSIAN 09
                                nm = float(line.split()[-4])
                                exec("nm_values_"+str(a)+".append(nm)")
                                osc = str(line.split()[-2])
                                osc = float(osc.split('=')[-1])
                                mult = (line.split()[-7].split("-")[0])
                                mult = multiplicity.get(mult)
                                exec("mult_values_"+str(a)+".append(mult)")
                                exec("osc_values_"+str(a)+".append(osc)")
                        exec("all_osc.extend(osc_values_"+str(a)+")")
                        exec("all_nm.extend(nm_values_"+str(a)+")")
                        exec("all_mult.append(mult_values_"+str(a)+")")
                    elif filetype=='Non':
                        a-=1
                        m_part=os.path.basename(m)
                        types.append(m_part+': Filetype not supported')
                        print(m_part+': Filetype not supported')
                        unsupported_files.append(m_part)
            else:
                print(os.path.basename(m), ': is not a file')
                unsupported_files.append(os.path.basename(m))
        max_f=max(all_osc)
        if unsupported_files==[]:
            print('File(s) correctly processed')
        else:
            for file in unsupported_files:
                datas.remove(file)
        #for i in types:
        #    print(i)       Could be useful
        citePATH=PATH+'/cite'
        issuePATH=PATH+'/issue_info'
        PloPATH=PATH+'/Plotter.py'
        if not datas==[]:
            print('\nSaving Excited states information...')
            with open(PloPATH) as f:
                exec(f.read())
        else:
            with open(citePATH) as f:
                exec(f.read())
            time.sleep(1)
            print('\nProvided files are not supported')
    except FileNotFoundError:
        print(datas[a-1]+': No such file or directory. Please enter a valid filename.')
    except Exception as e:
        print("An error occurred:", e)



