#!/usr/bin/python3
import argparse
import subprocess
import os, sys
import time
import ctypes

c = 2.998e8  # Speed of light in m/s
h = 6.626e-34  # Planck's constant in J*s
ev_to_joules = 1.602e-28  # Conversion factor from eV to joules

parser = argparse.ArgumentParser(prog="UVeh-Vis", description='Plotter of Absorption spectra using data of Quantum chemistry calculations of Excited states',
                                 epilog='Gaussian 09, 16 and Qchem 5.x files supported',formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("files", nargs="+", help="Input file(s), separated by spaces")
parser.add_argument("-wl", dest='wavelength', metavar='i,f', default='450,750' ,type=str, help="Starting (i) and final (f) wavelength in nm, separated by a comma (,)")
parser.add_argument("-dev", dest='deviation', metavar='value', type=float, default=0.4, help="Standard deviation (eV)")
parser.add_argument("-csv", dest="table", metavar='filename.csv', type=str, nargs="?", const='uveh_out.csv', help="Creates a CSV file containing all file(s) absorbances. Default is 'default.csv'")
parser.add_argument("-gau", "--gaussian", action='store_true', default=True, help="Plot the UV-Vis spectra with Gaussian adjustment")
parser.add_argument("-ltz", "--lorentzian", action='store_true', help="Plot the UV-Vis spectra with Lorenztian adjustment")
parser.add_argument("-norm", "--normalized", action='store_true', help="Y values are normalized to the highest peak of all lines")
parser.add_argument("-showm",dest='showmultiplicity', metavar='percentaje', type=float, nargs="?", const=0.5, default=-1, help="Each peak above the percentaje is labeled with the multiplicity of the resulting excited state")
parser.add_argument("-nosplit", dest="nosplit", action='store_true', help="If a multiple job file is provided, it won't be splitted")
parser.add_argument("-v","--version", action='version', version='%(prog)s 1.2')
args = parser.parse_args()

datas = args.files
wl = args.wavelength
wl=wl.split(',')
dev = args.deviation
ltz = args.lorentzian
gaus = args.gaussian
normal = args.normalized
multip = args.showmultiplicity
csv = args.table
nosplit=args.nosplit

types = []
unsupported_files = [] 
all_osc=[]
all_mult=[]
multiplicity = {'Singlet': 'S', 'Triplet': 'T', 'Quintet': 'Q'}
ES_key = {'Gaussian': ' f=', 'Q-Chem': 'Strength   :'}
Prog_key = {'Gaussian':'            Gaussian, Inc.  All Rights Reserved.\n', 'Q-Chem': '                  Welcome to Q-Chem\n'}
to_split=[]
Progs=['Gaussian','Q-Chem']
temp_files=[]

sys.path.append(os.getcwd())
PATH=sys.path[0]
lib_path=PATH+'/reader.so'
lib = ctypes.CDLL(lib_path)

lib.search_file.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_int)]
lib.search_file.restype = ctypes.POINTER(ctypes.c_int)
lib.export_lines.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_int)]
lib.export_lines.restype = ctypes.POINTER(ctypes.c_char_p)



def QC_prog(x):
    filename = str(x).encode('utf-8')
    result_size = ctypes.c_int(0)
    for Prog in Progs:
        string=Prog_key.get(Prog)
        search_string = str(string).encode('utf-8')
        result_ptr = lib.search_file(filename, search_string, ctypes.byref(result_size))
        Prog_indexes = [result_ptr[i] for i in range(result_size.value)]
        if Prog_indexes!=[]:
            filetype=Prog
            global njobs
            njobs = len(Prog_indexes)-1
    if Prog_indexes==[]:
        filetype='Non'
    return filetype
  
def index_Prog(x,filetype):
    string=Prog_key.get(filetype)
    filename = str(x).encode('utf-8')
    search_string = str(string).encode('utf-8')
    result_size = ctypes.c_int(0)
    result_ptr = lib.search_file(filename, search_string, ctypes.byref(result_size))
    indexes = [result_ptr[i] for i in range(result_size.value)]
    return indexes
  
def ES_check(x,filetype):
    keyword=ES_key.get(filetype)
    filename = str(x).encode('utf-8')
    search_string = str(keyword).encode('utf-8')
    result_size = ctypes.c_int(0)
    result_ptr = lib.search_file(filename, search_string, ctypes.byref(result_size))
    result = [result_ptr[i] for i in range(result_size.value)]
    nstates=len(result)-1
    return nstates

citePATH=PATH+'/cite'
issuePATH=PATH+'/issue_info'
PloPATH=PATH+'/Plotter.py'

if len(wl) == 1:
    print("Error: You must provide a wavelength range separated by a comma e.g.  -wl 200,700")
elif not wl[0] < wl[1]:
    print('Error: Initial wavelenght must be lower than final wavelenght')
lambda1 = wl[0]
lambda2 = wl[1]

print('Checking File(s)...\n')
try:
    for file in datas:
        filename=file
        file = os.path.abspath(file)
        if os.path.isdir(file):
            print(filename, ': is not a file')
            unsupported_files.append(filename)
        else:
            filetype=QC_prog(file)
            if filetype=='Non':
                print(filename, ': Filetype not supported')
                unsupported_files.append(filename)
            else:
                nstates=ES_check(file,filetype)
                if nstates==0:
                    print(filename, ': Error: No excited states found')
                    unsupported_files.append(filename)
                else:
                    if njobs > 1:
                        print(f'{filename}: File has {njobs} jobs')
                        to_split.append(file)
except FileNotFoundError:
    print(filename+': No such file or directory. Please enter a valid filename.')
    unsupported_files.append(filename)
except Exception as e:
    print("An error occurred:", e)
if to_split != []:
    if not nosplit:
        for x in to_split:
            name=os.path.basename(x)
            datas.remove(name)
            print(f'\nSplitting {name}...')
            filetype=QC_prog(x)
            indexes=index_Prog(x,filetype)
            filename = str(x).encode('utf-8')
            num_lines = ctypes.c_int(0)
            lines_ptr = lib.export_lines(filename, ctypes.byref(num_lines))
            lines = [lines_ptr[i].decode('utf-8') for i in range(num_lines.value)]
            for n in range(1,njobs+1):
                sub_name=name.split(".")[0]+'(J'+str(n)+').out'
                temp_files.append(sub_name)
                with open(sub_name,'w') as file:
                    print(sub_name, 'created')
                    start=indexes[n-1]-4
                    end=indexes[n]-2
                    for line in lines[start:end]:
                        file.write(line)
        datas.extend(temp_files)
        for x in temp_files:
            nstates=ES_check(x,filetype)
            if nstates==0:
                print(x, ': No excited states found')
                unsupported_files.append(x) 
    else:
        print("Multiple job files won't be splitted")   


if unsupported_files==[]:
        print('\nFile(s) correctly processed')
else:
        for file in unsupported_files:
            datas.remove(file)
        unsupported_files=[]

if not datas==[]:
    print('\nChecking File(s)...Done')
else:
    with open(citePATH) as f:
        exec(f.read())
    time.sleep(1)
    print('Error: None provided file(s) is supported, please check the errors above')
    exit()


print('Saving Excited states info...\n')
a=0
for m in datas:
    m_name=m
    m = os.path.abspath(m)
    a+=1
    with open(m, 'r') as file:
        lines = file.readlines()
        exec("osc_values_"+str(a)+"= []")
        exec("nm_values_"+str(a)+"=[]")
        exec("mult_values_"+str(a)+"=[]")
        filetype=QC_prog(m)
        if filetype=='Q-Chem':
            types.append(m_name+' is a Q-Chem output file')
            for num, line in enumerate(lines):
                if 'Strength   :' in line:
                    osc = float(line.split()[-1])
                    exec("osc_values_"+str(a)+".append(osc)")
                    prev_line = lines[num - 4].strip()
                    prev_block = lines[num -5:num]
                    mult = [multiplicity.get(line.split(':')[-1].strip(), '') for line in prev_block if 'Multiplicity' in line]
                    exec("mult_values_"+str(a)+".append(mult[0])")
                    E= float(prev_line.split()[-1])
                    nm=h*c/(E*ev_to_joules)
                    exec("nm_values_"+str(a)+".append(nm)")
        elif filetype=='Gaussian':
            types.append(m_name+' is a Gaussian output file')
            for num, line in enumerate(lines):
                if ' f=' in line:
                    nm = float(line.split()[-4])
                    exec("nm_values_"+str(a)+".append(nm)")
                    osc = str(line.split()[-2])
                    osc = float(osc.split('=')[-1])
                    mult = (line.split()[-7].split("-")[0])
                    mult = multiplicity.get(mult)
                    exec("mult_values_"+str(a)+".append(mult)")
                    exec("osc_values_"+str(a)+".append(osc)")
    exec("all_osc.extend(osc_values_"+str(a)+")")
    exec("all_mult.append(mult_values_"+str(a)+")")
#for i in types:
    #print(i)       #Could be useful
with open(PloPATH) as f:
    exec(f.read())

